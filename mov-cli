#!/bin/sh

c_red="\033[1;31m"
c_green="\033[1;32m"
c_yellow="\033[1;33m"
c_blue="\033[1;34m"
c_magenta="\033[1;35m"
c_cyan="\033[1;36m"
c_reset="\033[0m"

help_text () {
        while IFS= read -r line; do
	    printf "%s\n" "$line"
	done <<-EOF
	Usage:
	    ${0##*/} [-d | -p <download_dir>] [<query>]
	    ${0##*/} [-v] [<query>]
	    ${0##*/} [-t] [<query>]
	    ${0##*/} -h
	
	Options:
	    -h show helptext
	    -d download video
	    -t search tv-show (default search:movies)
	    -p download video to specified directory
	    -v use VLC as the media player
	EOF
}

die () {
	printf "$c_red%s$c_reset\n" "$*" >&2
	exit 0
}

err () {
	printf "$c_red%s$c_reset\n" "$*" >&2
}

get_query () {
	if [ -z "$*" ]; then 
		printf "search: "
		read -r movie
	else
		movie=$*
	fi
}

get_token() {
	token=$(curl -X POST -sc - -o /dev/null "$base_url:5679/authorization/session/continue?contentUsageType=Viewing" -A "uwu" -H "Origin: $base_url" -e "$base_url" | sed -n 's/.*ipiid\t//p')
}

input() {
	printf "$c_yellow  $1??(1-%s):$c_reset " "$2"
	read -r x
	while [ -z "$x" ] || [ "$x" -lt "1" ] || [ "$x" -gt "$2" ];do 
	    err "Invalid choice"
	    printf "$c_yellow\t$1??(1-%s):$c_reset " "$2"
	    read -r x
	done
	[ "$3" -eq "0" ] && season_choice=$x || ep_no=$x 
	unset x
}

stream () {
	case $player_fn in 
		vlc)
			setsid -f "$player_fn" --http-referrer="$base_url" "$1" > /dev/null 2>&1;;
		mpv)
			setsid -f "$player_fn" "$1" --referrer="$base_url" --force-media-title="$2" > /dev/null 2>&1;;
	esac
}

download () {
	printf "${c_blue}Downloading %s${c_reset}\n" "$2"
	aria2c --summary-interval=0 -x 16 -s 16 --referer="$base_url" "$1" --dir=$download_dir -o "${2}.mp4" --download-result=hide
}

get_show() {
	query=$(printf "%s" "$movie" | tr " " "+")
	data=$(curl -s "https://theflix.to/tv-shows/trending?search=$query")
	result=$(printf "%s" "$data" | sed "s/:\"$movie.*//" | tr '{|}' '\n' | sed -nE 's/.*"name":"([^"]*)","numberOfSeasons":(.*),.*numberOfEpisod.*"id":(.*),"available":true.*/\2 \3 \1/p' | fzf | tr "[:punct:]" " " | tr -s " " | tr ' |[:upper:]' '-|[:lower:]')
	[ -z "$result" ] && die "No tv-show selected"
	build_id=$(printf "%s" "$data" | sed -nE 's/.*buildId\":"(.*)",.*run.*/\1/p')
	result_id=$(printf "%s" "$result" | cut -d"-" -f2-)
	show_all=$(curl -s "https://theflix.to:443/_next/data/$build_id/tv-show/$result_id/season-1/episode-1.json" -b "theflix.ipiid=$token" | sed 's/selectedTvSeason.*//' | tr '{|}' '\n')
	get_show_se
}

get_show_se() {
	season=$(printf "%s" "$result" | cut -d"-" -f1)
	input "Season" "$season" "0"
	noofeps=$(printf "%s" "$show_all" | sed -nE "s/.*Season $season_choice\",\"numberOfEpisodes\":(.*),\"seasonN.*/\1/p")
	input "Episode" "$noofeps" "1"
	get_ep_link "$season_choice" "$ep_no"
}

get_ep_link(){
	id=$(printf "%s" "$show_all" | sed -nE "s/^\"episodeNumber\":$2,.*name.*\"seasonNumber\":$1.*videos\":\[\"(.*)\"\]/\1/p")
	[ -z "$id" ] && err "Episode doesn't exist on this site"
	display=$(printf "%s S%s E%s" "$(printf "$result_id" | cut -d"-" -f2- | tr "-" " ")" "$1" "$2")
	play_link "tv"
}

get_movie () {
	query=$(printf "%s" "$movie" | tr " " "+")
	results=$(curl -s "$base_url/movies/trending?search=$query" | sed "s/$movie.*//" | tr '{|}' '\n' | sed -nE 's/^\"name\":"([^"]*)",.*available\":true.*videos\":\["(.*)"\],.*/\2\t\1/p')
	[ -z "$results" ] && die "No search results found"
	movie_name=$(printf "$results" | cut -f2- | fzf)
	[ -z "$movie_name" ] && die "No movie chosen"
	id=$(printf "%s" "$results" | sed -n "s/\t$movie_name$//p")
	display=$(printf "%s" "$movie_name" | tr -d '[:punct:]')
	play_link "movies"
}

play_link() {
	video_link="$(curl -s "$base_url:5679/$1/videos/$id/request-access?contentUsageType=Viewing" -b "theflix.ipiid=$token" | sed -nE 's/.*url\":"([^"]*)",.*id.*/\1/p')"
	if [ -z "$video_link" ];then 
	    err "Video Url Not found" 
	else
	    printf "\n%s\n" "$video_link"
	    if [ "$is_download" -eq "0" ];then
		stream "$video_link" "$display"
	    else
		download "$video_link" "$display"
	    fi
	fi
}

trap "exit 0" INT HUP
base_url="https://theflix.to"
player_fn="mpv"
is_show=0
is_download=0
download_dir=.

while getopts 'dhtp:v' OPT; do
        case $OPT in
                d)
                        is_download=1
                        ;;
                t)
                        is_show=1
                        ;;
                p)
                        is_download=1
			download_dir=$OPTARG
                        ;;
                v)
                        player_fn="vlc"
                        ;;
                *|h)
                        help_text
                        exit 0
                        ;;
	esac
done
shift $((OPTIND - 1))

get_query "$*"
get_token
[ "$is_show" -eq "0" ] && get_movie || get_show

while :; do
        printf "\n${c_green}Currently playing %s\n" "$display"
        printf "$c_blue(%s) %s$c_reset\n" "s" "search next"
        [ "$is_show" -eq "1" ] && printf "$c_yellow(%s) %s$c_reset\n" "n" "next"
        [ "$is_show" -eq "1" ] && printf "$c_cyan(%s) %s$c_reset\n" "p" "previous"
        [ "$is_show" -eq "1" ] && printf "$c_green(%s) %s$c_reset\n" "c" "change season"
        [ "$is_show" -eq "1" ] && printf "$c_blue(%s) %s$c_reset\n" "e" "select episode"
	printf "$c_magenta(%s) %s$c_reset\n" "d" "download current video"
	printf "$c_red(%s) %s$c_reset\n" "q" "exit"
        printf "${c_green}Enter choice:$c_reset "
        read choice
        printf "$c_reset"
        case $choice in
                s)
			get_query
			[ "$is_show" -eq "0" ] && get_movie || get_show
			;;
                d)
			download "$video_link" "$display";;
                n)
			ep_no=$((ep_no + 1))
                        get_ep_link "$season_choice" "$ep_no";;
                p)
			ep_no=$((ep_no + 1))
                        get_ep_link "$season_choice" "$ep_no";;
                e)
			input "Episode" "$noofeps" "1"
                        get_ep_link "$season_choice" "$ep_no";;
                c)
			get_show_se;;
                q)
                        break;;
                *)
                        err "invalid choice";;
        esac
done
